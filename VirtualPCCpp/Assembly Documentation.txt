General info:
Arguments are used as positions in cpu cache, not values (Except for JMP, the argument is used as instruction count, CMP uses memory position as first argument, instruction count as second)
You explicitly need 1 space between instructions and arguments (or a new line)
RGB values are limited from 0 to 127
Character space is limited X: 0 - 56, Y: 0 - 26 (For the resolution of 320x240)
Comments can be written with //, that line is ignored
Each instruction needs to be in its own seperate line or error checking may be wrong

SET instruction is not counted when using JMP or CMP, so:
---
SET8 C 200 5
SET8 C 201 5
LOAD0_C8 200
LOAD1_C8 201
SUM
COT0
JMP 0 -> it will jump to LOAD0_C rather than SET
---

Instruction set:
LOAD0_C24 - Load to register0 from cache, 3 bytes                 1 argument  (index of origin memory in cache)
LOAD1_C24 - Load to register1 from cache, 3 bytes                 1 argument  (index of origin memory in cache)
LOAD0_R24 - Load to register0 from ram, 3 bytes                   1 argument  (index of origin memory in ram)
LOAD1_R24 - Load to register1 from ram, 3 bytes                   1 argument  (index of origin memory in ram)
LOAD0_C16 - Load to register0 from cache, 2 bytes                 1 argument  (index of origin memory in cache)
LOAD1_C16 - Load to register1 from cache, 2 bytes                 1 argument  (index of origin memory in cache)
LOAD0_R16 - Load to register0 from ram, 2 bytes                   1 argument  (index of origin memory in ram)
LOAD1_R16 - Load to register1 from ram, 2 bytes                   1 argument  (index of origin memory in ram)
LOAD0_C8  - Load to register0 from cache, 1 byte                  1 argument  (index of origin memory in cache)
LOAD1_C8  - Load to register1 from cache, 1 byte                  1 argument  (index of origin memory in cache)
LOAD0_R8  - Load to register0 from ram, 1 byte                    1 argument  (index of origin memory in ram)
LOAD1_R8  - Load to register1 from ram, 1 byte                    1 argument  (index of origin memory in ram)
CLR0     - Clear register0,                                      0 arguments
CLR1     - Clear register1,                                      0 arguments
WRT0_C24 - Write from register0 to cache, 3 bytes                1 argument  (index of target memory in cache)
WRT1_C24 - Write from register1 to cache, 3 bytes                1 argument  (index of target memory in cache)
WRT0_R24 - Write from register0 to ram, 3 bytes                  1 argument  (index of target memory in ram)
WRT1_R24 - Write from register1 to ram, 3 bytes                  1 argument  (index of target memory in ram)
WRT0_C16 - Write from register0 to cache, 2 bytes                1 argument  (index of target memory in cache)
WRT1_C16 - Write from register1 to cache, 2 bytes                1 argument  (index of target memory in cache)
WRT0_R16 - Write from register0 to ram, 2 bytes                  1 argument  (index of target memory in ram)
WRT1_R16 - Write from register1 to ram, 2 bytes                  1 argument  (index of target memory in ram)
WRT0_C8  - Write from register0 to cache, 1 byte                 1 argument  (index of target memory in cache)
WRT1_C8  - Write from register1 to cache, 1 byte                 1 argument  (index of target memory in cache)
WRT0_R8  - Write from register0 to ram, 1 byte                   1 argument  (index of target memory in ram)
WRT1_R8  - Write from register1 to ram, 1 byte                   1 argument  (index of target memory in ram)
WRTC_R   - Write from cache to ram,                              2 arguments (index of origin memory in cache, index of target memory in ram)
WRTR_C   - Write from ram to cache,                              2 arguments (index of origin memory in ram, index of target memory in cache)
SUM      - Adds register0 and register1,                         0 arguments
SUB      - Subtracts register0 and register1,                    0 arguments
MLT      - Multiplies register0 and register1,                   0 arguments
DIV      - Divides register0 and register1,                      0 arguments
REG0_B   - Check if register0 is greater than register1,         0 arguments
REG0_BE  - Check if register0 is greater or equal to register1,  0 arguments
REG1_B   - Check if register1 is greater than register0,         0 arguments
REG1_BE  - Check if register1 is greater or equal to register0,  0 arguments
REG_EQL  - Check if register0 and register1 are the same size,   0 arguments
REG_DIF  - Check if register0 and register1 are different size,  0 arguments
JMP      - Sets program counter to target position,              1 argument  (target assembly instruction)
CMP      - Compares register0 to a condition,                    2 arguments (0 or 1 for the condition (false or true), jump position if condition is met)
COT0     - Print to console contents of register0,               0 arguments
COT1     - Print to console contents of register1,               0 arguments
WRT_R_VR - Write from RAM to vRAM,                               3 arguments (start position of memory in ram, end position of memory in ram, start position in memory of vram)
WRT_VR_R - Write from vRAM to RAM,                               3 arguments (start position of memory in vram, end position of memory in vram, start position in memory of ram)
DRAWP    - Draw rectangle on screen,                             7 arguments (start x position, start y position, end x position, end y position, r value, g value, b value)
PRINT    - Print character to screen,                            6 arguments (character position in cpu cache, x position in character space, y position in character space, r value, g value, b value)
CHK_K    - Put current keyboard input value into cache,          1 argument  (place in cache)
WAIT     - CPU waits a number of cycles,                         1 argument  (waiting time)
CLR_COMM - Clears GPU command bufer,                             0 arguments
CLR_VRAM - Clears GPU vRam,                                      0 arguments
SET24   - Set a value to a place in cache/ram, 3 bytes           3 arguments (C/R depending where you want to set the value, position in memory, value)
SET16   - Set a value to a place in cache/ram, 3 bytes           3 arguments (C/R depending where you want to set the value, position in memory, value)
SET8    - Set a value to a place in cache/ram, 3 bytes           3 arguments (C/R depending where you want to set the value, position in memory, value)

Examples:
1. Print pressed keyboard character to PC screen
---
SET8 C 201 1                    //Sets value 1 at position 201 in cpu cache
SET8 C 202 60                   //Sets value 60 at position 202 in cpu cache
CHK_K 220                       //Gets current key pressed and stores it at the position 220 in cache
PRINT 220 201 201 202 202 202   //Prints character at position 220 in cache at position X: 1, Y: 1 and color values R: 60, G: 60, B: 60
CLR_COMM CLR_VRAM               //Clears GPU command buffer and vRam after printing the character to prevent memory leaks
JMP 0                           //Jumps to instuction 0 (in this case CHK_K)
---

2.Arithmetic operations
---
SET8 C 200 1  //Sets value 1 at position 200 in cpu cache
SET8 C 201 5  //Sets value 5 at position 201 in cpu cache
LOAD0_C8 200  //Loads value from position 200 in cpu cache to register 0
LOAD1_C8 201  //Loads value from position 201 in cpu cache to register 1
SUM           //Adds values from register 0 and register 1 and puts the result in register 0
COT0          //Prints value of register 0 to console
---

3.Logic operations
---
SET8 C 200 5  //Sets value 5 at position 200 in cpu cache
SET8 C 201 10 //Sets value 10 at position 201 in cpu cache
LOAD0_C8 200  //Loads value from position 200 in cpu cache to register 0
LOAD1_C8 201  //Loads value from position 201 in cpu cache to register 1
REG0_BE       //Checks if register 0 holds a greater value than register 1, the result is stored in register 0
COT0          //Prints the result (0 for false, 1 for true) to console
---

4.If statement
---
SET8 C 200 5  //Sets value 5 at position 200 in cpu cache
SET8 C 201 10 //Sets value 10 at position 201 in cpu cache
SET8 C 202 0  //Sets value 0 at position 202 in cache
LOAD0_C8 200  //Loads value from position 200 in cpu cache to register 0
LOAD1_C8 201  //Loads value from position 201 in cpu cache to register 1
REG0_BE       //Checks if register 0 holds a greater value than register 1, the result is stored in register 0
CMP 202 10    //Check if register 0 value is equal to 0 (false), if it is, jump to the end of the if statement (The trick is to CMP to the opposite of what you are checking for, since if you check for 1 and the condition is true, its going to jump over your if statement)
---

5.For loop
---
SET8 C 200 0   //Sets value 0 to position 200 in cpu cache
SET8 C 201 1   //Sets value 1 to position 201 in cpu cache
SET8 C 202 10  //Sets value 10 to position 202 in cpu cache
LOAD0_C8 200   //Loads value from position 200 in cpu cache to register 0
LOAD1_C8 201   //Loads value from position 201 in cpu cache to register 1
SUM            //Adds values from register 0 and register 1 and puts the result in register 0
LOAD1_C8 202   //Loads value from position 202 in cpu cache to register 1
REG1_B         //Checks if register 1 holds a greater value than register 0 and stores the result in register 0
CMP 201 0      //Checks if register 0 is equal to 1 (true), if yes, jump to start of the code at position 0, if not, continue with the code
---

Character codes:
0:  0, -: 21, C: 42, X: 63, p: 84
1:  1, ,: 22, D: 43, Y: 64, q: 85
2:  2, .: 23, E: 44, Z: 65, r: 86
3:  3, /: 24, F: 45, _: 66, s: 87
4:  4, \: 25, G: 46,  : 67, t: 88
5:  5, :: 26, H: 47, @: 68, u: 89
6:  6, ;: 27, I: 48, a: 69, v: 90
7:  7, <: 28, J: 49, b: 70, w: 91
8:  8, >: 29, K: 50, c: 71, x: 92
9:  9, =: 30, L: 51, d: 72, y: 93
!: 10, ?: 31, M: 52, e: 73, z: 94
": 11, [: 32, N: 53, f: 74,
#: 12, ]: 33, O: 54, g: 75,
$: 13, {: 34, P: 55, h: 76,
%: 14, }: 35, Q: 56, i: 77,
&: 15, `: 36, R: 57, j: 78,
': 16, ^: 37, S: 58, k: 79,
(: 17, |: 38, T: 59, l: 80,
): 18, ~: 39, U: 60, m: 81,
*: 19, A: 40, V: 61, n: 82,
+: 20, B: 41, W: 62, o: 83,