General info:
You explicitly need 1 space between instructions and arguments (or a new line)
RGB values are limited from 0 to 127
Character space is limited X: 0 - 56, Y: 0 - 26 (For the resolution of 320x240)
Comments can be written with //, that line is ignored
Each instruction needs to be in its own seperate line or error checking may be wrong

You have data sections so you can do:
data_s         //Start of data section
u8 x 5         //Variable x with type of 1 byte and stored value 5
u16a y 3 1 2 3 //Array y with type of 2 byte elements (3 of them) with values 1 2 and 3
data_e         //End of data section

You have interrupt part of the code which allows you to do:
inter_s //Start of interrupt code
//Any instruction can go here
inter_e //End of interrupt code 

You can set jump postions for jmp and cmp instructions

forward:

You define jump positions by typing the name of it and putting a colon at the end of it

Interrupt code executes on an interrupt, current ones are only keyboard input

You can do REG0, REG1 and REG_INT for accessing register0, register1 and interruptRegister as arguments for instructions

Instruction set:
load0_24  - Load to register0 from ram, 3 bytes                   1 argument  (index of origin memory in ram)
load1_24  - Load to register1 from ram, 3 bytes                   1 argument  (index of origin memory in ram)
load0_16  - Load to register0 from ram, 2 bytes                   1 argument  (index of origin memory in ram)
load1_16  - Load to register1 from ram, 2 bytes                   1 argument  (index of origin memory in ram)
load0_8   - Load to register0 from ram, 1 byte                    1 argument  (index of origin memory in ram)
load1_8   - Load to register1 from ram, 1 byte                    1 argument  (index of origin memory in ram)
load0_24a - Load to register0 from ram with offset, 3 bytes       2 argument  (index of origin memory in ram, index of offset in ram)
load1_24a - Load to register1 from ram with offset, 3 bytes       2 argument  (index of origin memory in ram, index of offset in ram)
load0_16a - Load to register0 from ram with offset, 2 bytes       2 argument  (index of origin memory in ram, index of offset in ram)
load1_16a - Load to register1 from ram with offset, 2 bytes       2 argument  (index of origin memory in ram, index of offset in ram)
load0_8a  - Load to register0 from ram with offset, 1 byte        2 argument  (index of origin memory in ram, index of offset in ram)
load1_8a  - Load to register1 from ram with offset, 1 byte        2 argument  (index of origin memory in ram, index of offset in ram)
clr0      - Clear register0,                                      0 arguments
clr1      - Clear register1,                                      0 arguments
wrt0_24   - Write from register0 to ram, 3 bytes                  1 argument  (index of target memory in ram)
wrt1_24   - Write from register1 to ram, 3 bytes                  1 argument  (index of target memory in ram)
wrt0_16   - Write from register0 to ram, 2 bytes                  1 argument  (index of target memory in ram)
wrt1_16   - Write from register1 to ram, 2 bytes                  1 argument  (index of target memory in ram)
wrt0_8    - Write from register0 to ram, 1 byte                   1 argument  (index of target memory in ram)
wrt1_8    - Write from register1 to ram, 1 byte                   1 argument  (index of target memory in ram)
wrt0_24a  - Write from register0 to ram with offset, 3 bytes      2 argument  (index of origin memory in ram, index of offset in ram)
wrt1_24a  - Write from register1 to ram with offset, 3 bytes      2 argument  (index of origin memory in ram, index of offset in ram)
wrt0_16a  - Write from register0 to ram with offset, 2 bytes      2 argument  (index of origin memory in ram, index of offset in ram)
wrt1_16a  - Write from register1 to ram with offset, 2 bytes      2 argument  (index of origin memory in ram, index of offset in ram)
wrt0_8a   - Write from register0 to ram with offset, 1 byte       2 argument  (index of origin memory in ram, index of offset in ram)
wrt1_8a   - Write from register1 to ram with offset, 1 byte       2 argument  (index of origin memory in ram, index of offset in ram)
wrtR_H    - Write from ram to hdd,                                2 arguments (index of origin memory in ram, index of target memory in hdd)
wrtH_R    - Write from hdd to ram,                                2 arguments (index of origin memory in hdd, index of target memory in ram)
sum       - Adds register0 and register1,                         0 arguments
sub       - Subtracts register0 and register1,                    0 arguments
mlt       - Multiplies register0 and register1,                   0 arguments
div       - Divides register0 and register1,                      0 arguments
reg0_b    - Check if register0 is greater than register1,         0 arguments
reg0_be   - Check if register0 is greater or equal to register1,  0 arguments
reg1_b    - Check if register1 is greater than register0,         0 arguments
reg1_be   - Check if register1 is greater or equal to register0,  0 arguments
reg_eql   - Check if register0 and register1 are the same size,   0 arguments
reg_dif   - Check if register0 and register1 are different size,  0 arguments
jmp       - Sets program counter to target position,              1 argument  (target jump position)
cmp       - Compares register0 to a condition,                    2 arguments (0 or 1 for the condition (false or true), jump position if condition is not met)
cmp_a     - Compares if two arrays contain same elements          2 arguments (size needs of arrays (they need to be same) needs to be loaded into register0, first array, second array)
cot0      - Print to console contents of register0,               0 arguments
cot1      - Print to console contents of register1,               0 arguments
chk_k     - Put current keyboard input value into cache,          1 argument  (place in cache)
wait      - CPU waits a number of cycles,                         1 argument  (waiting time)
clr_comm  - Clears GPU command bufer,                             0 arguments
clr_vram  - Clears GPU vRam,                                      0 arguments
stop      - Stops the PC (this one is always needed in the end of the program)

Character codes:
0:  0,  -: 21,  C: 42,  X: 63,  p: 84
1:  1,  ,: 22,  D: 43,  Y: 64,  q: 85
2:  2,  .: 23,  E: 44,  Z: 65,  r: 86
3:  3,  /: 24,  F: 45,  _: 66,  s: 87
4:  4,  \: 25,  G: 46,   : 67,  t: 88
5:  5,  :: 26,  H: 47,  @: 68,  u: 89
6:  6,  ;: 27,  I: 48,  a: 69,  v: 90
7:  7,  <: 28,  J: 49,  b: 70,  w: 91
8:  8,  >: 29,  K: 50,  c: 71,  x: 92
9:  9,  =: 30,  L: 51,  d: 72,  y: 93
!: 10,  ?: 31,  M: 52,  e: 73,  z: 94
": 11,  [: 32,  N: 53,  f: 74,
#: 12,  ]: 33,  O: 54,  g: 75,
$: 13,  {: 34,  P: 55,  h: 76,
%: 14,  }: 35,  Q: 56,  i: 77,
&: 15,  `: 36,  R: 57,  j: 78,
': 16,  ^: 37,  S: 58,  k: 79,
(: 17,  |: 38,  T: 59,  l: 80,
): 18,  ~: 39,  U: 60,  m: 81,
*: 19,  A: 40,  V: 61,  n: 82,
+: 20,  B: 41,  W: 62,  o: 83,

Keyboard character codes:
Backspace: 96,
Space:     67,
Return:    95

