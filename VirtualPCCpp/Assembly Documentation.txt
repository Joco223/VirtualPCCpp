General info:
Arguments are used as positions in cpu ram, not values (Except for JMP, the argument is used as instruction count, CMP uses memory position as first argument, instruction count as second)
You explicitly need 1 space between instructions and arguments (or a new line)
RGB values are limited from 0 to 127
Character space is limited X: 0 - 56, Y: 0 - 26 (For the resolution of 320x240)
Comments can be written with //, that line is ignored
Each instruction needs to be in its own seperate line or error checking may be wrong
SET instruction is not counted when using JMP or CMP
Arguments are loaded into registers first, so you need to load them into registers
Except for CMP where jump location is in register1 and condition you write next to it so -> CMP 1

Instruction set:
LOAD0_24 - Load to register0 from ram, 3 bytes                   1 argument  (index of origin memory in ram)
LOAD1_24 - Load to register1 from ram, 3 bytes                   1 argument  (index of origin memory in ram)
LOAD0_16 - Load to register0 from ram, 2 bytes                   1 argument  (index of origin memory in ram)
LOAD1_16 - Load to register1 from ram, 2 bytes                   1 argument  (index of origin memory in ram)
LOAD0_8  - Load to register0 from ram, 1 byte                    1 argument  (index of origin memory in ram)
LOAD1_8  - Load to register1 from ram, 1 byte                    1 argument  (index of origin memory in ram)
CLR0     - Clear register0,                                      0 arguments
CLR1     - Clear register1,                                      0 arguments
WRT0_24  - Write from register0 to ram, 3 bytes                  1 argument  (index of target memory in ram)
WRT1_24  - Write from register1 to ram, 3 bytes                  1 argument  (index of target memory in ram)
WRT0_16  - Write from register0 to ram, 2 bytes                  1 argument  (index of target memory in ram)
WRT1_16  - Write from register1 to ram, 2 bytes                  1 argument  (index of target memory in ram)
WRT0_8   - Write from register0 to ram, 1 byte                   1 argument  (index of target memory in ram)
WRT1_8   - Write from register1 to ram, 1 byte                   1 argument  (index of target memory in ram)
WRTR_H   - Write from ram to hdd,                                2 arguments (index of origin memory in ram, index of target memory in hdd)
WRTH_R   - Write from hdd to ram,                                2 arguments (index of origin memory in hdd, index of target memory in ram)
SUM      - Adds register0 and register1,                         0 arguments
SUB      - Subtracts register0 and register1,                    0 arguments
MLT      - Multiplies register0 and register1,                   0 arguments
DIV      - Divides register0 and register1,                      0 arguments
REG0_B   - Check if register0 is greater than register1,         0 arguments
REG0_BE  - Check if register0 is greater or equal to register1,  0 arguments
REG1_B   - Check if register1 is greater than register0,         0 arguments
REG1_BE  - Check if register1 is greater or equal to register0,  0 arguments
REG_EQL  - Check if register0 and register1 are the same size,   0 arguments
REG_DIF  - Check if register0 and register1 are different size,  0 arguments
JMP      - Sets program counter to target position,              1 argument  (target assembly instruction)
CMP      - Compares register0 to a condition,                    2 arguments (0 or 1 for the condition (false or true), jump position if condition is met)
COT0     - Print to console contents of register0,               0 arguments
COT1     - Print to console contents of register1,               0 arguments
DRAWP    - Draw rectangle on screen,                             2 arguments (start of data in ram, number of pixels)
PRINT    - Print character to screen,                            1 argument  (start of data in ram)
CHK_K    - Put current keyboard input value into cache,          1 argument  (place in cache)
WAIT     - CPU waits a number of cycles,                         1 argument  (waiting time)
CLR_COMM - Clears GPU command bufer,                             0 arguments
CLR_VRAM - Clears GPU vRam,                                      0 arguments
SET24    - Set a value to a place in ram, 3 bytes                2 arguments (position in memory, value)
SET16    - Set a value to a place in ram, 3 bytes                2 arguments (position in memory, value)
SET8     - Set a value to a place in ram, 3 bytes                2 arguments (position in memory, value)
STOP     - Stops the PC (this one is always needed in the end of the program)

Character codes:
0:  0, -: 21, C: 42, X: 63, p: 84
1:  1, ,: 22, D: 43, Y: 64, q: 85
2:  2, .: 23, E: 44, Z: 65, r: 86
3:  3, /: 24, F: 45, _: 66, s: 87
4:  4, \: 25, G: 46,  : 67, t: 88
5:  5, :: 26, H: 47, @: 68, u: 89
6:  6, ;: 27, I: 48, a: 69, v: 90
7:  7, <: 28, J: 49, b: 70, w: 91
8:  8, >: 29, K: 50, c: 71, x: 92
9:  9, =: 30, L: 51, d: 72, y: 93
!: 10, ?: 31, M: 52, e: 73, z: 94
": 11, [: 32, N: 53, f: 74,
#: 12, ]: 33, O: 54, g: 75,
$: 13, {: 34, P: 55, h: 76,
%: 14, }: 35, Q: 56, i: 77,
&: 15, `: 36, R: 57, j: 78,
': 16, ^: 37, S: 58, k: 79,
(: 17, |: 38, T: 59, l: 80,
): 18, ~: 39, U: 60, m: 81,
*: 19, A: 40, V: 61, n: 82,
+: 20, B: 41, W: 62, o: 83,